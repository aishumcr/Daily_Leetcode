Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.
Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".
Example 3:

Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.



class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        char[] ch=s.toCharArray();
        int n=s.length(),maxLength=-1,flag=0;
        HashMap<Character,Integer> hm=new HashMap<>();
       for(int i=0;i<n;i++){
           if(hm.containsKey(ch[i])){
               maxLength=Math.max(maxLength,i-hm.get(ch[i])-1);
           }
           else{
               hm.put(ch[i],i);
           }
       }
 
       return maxLength;
    }
}



class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        char[] ch=s.toCharArray();
        int n=s.length(),maxLength=0,flag=0;
       for(int i=0;i<n;i++){
           for(int j=i+1;j<n;j++){
               if(ch[i]==ch[j]){
                   flag=1;
                   maxLength=Math.max(maxLength,j-i-1);
               }
           }
       }
       if(flag==0) return -1;
       return maxLength;
    }
}
