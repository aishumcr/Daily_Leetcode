Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.



import java.util.HashMap;

public class Solution {
    public String minWindow(String s, String t) {
        String ans = "";
        int i = 0, j = 0;
        int mini = Integer.MAX_VALUE;
        HashMap<Character, Integer> mp = new HashMap<>();
        for (char c : t.toCharArray()) {
            mp.put(c, mp.getOrDefault(c, 0) + 1);
        }
        int count = mp.size();
        int start = 0;
        while (j < s.length()) {
            char c = s.charAt(j);
            if (mp.containsKey(c)) {
                mp.put(c, mp.get(c) - 1);
                if (mp.get(c) == 0) {
                    count--;
                }
            }
            j++;
            while (count == 0) {
                if (mini > j - i) {
                    mini = j - i;
                    start = i;
                }
                char c1 = s.charAt(i);
                if (mp.containsKey(c1)) {
                    mp.put(c1, mp.get(c1) + 1);
                    if (mp.get(c1) > 0) count++;
                }
                i++;
            }
        }
        if (mini != Integer.MAX_VALUE) {
            ans = s.substring(start, start + mini);
        }
        return ans;
    }
}

 
