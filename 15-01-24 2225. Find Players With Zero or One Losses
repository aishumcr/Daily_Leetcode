You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.

Return a list answer of size 2 where:

answer[0] is a list of all players that have not lost any matches.
answer[1] is a list of all players that have lost exactly one match.
The values in the two lists should be returned in increasing order.

Note:

You should only consider the players that have played at least one match.
The testcases will be generated such that no two matches will have the same outcome.
 

Example 1:

Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].
Example 2:

Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = [].



SOLUTION :::

class Solution {
    public List<List<Integer>> findWinners(int[][] matches) {
         HashMap<Integer,Integer> wins=new HashMap<>();
         HashMap<Integer,Integer> loss=new HashMap<>();
        for(int i=0;i<matches.length;i++){
            int x=matches[i][0];
            int y=matches[i][1];
            wins.put(x,wins.getOrDefault(x,0)+1);
            loss.put(y,loss.getOrDefault(y,0)+1);
        }
        HashSet<Integer> hs1=new HashSet<>();
        HashSet<Integer> hs2=new HashSet<>();

        for(Map.Entry<Integer,Integer> h:wins.entrySet()){
            int key=h.getKey();
            if(loss.get(key)==null) hs1.add(key);
            else if(loss.get(key)==1) hs2.add(key);
        }
        for(Map.Entry<Integer,Integer> h:loss.entrySet()){
            int key=h.getKey();
            int value=h.getValue();
            if(value==1) hs2.add(key);
        }
        ArrayList<Integer> arr1=new ArrayList<>(hs1);
        ArrayList<Integer> arr2=new ArrayList<>(hs2);
        Collections.sort(arr1);
       Collections.sort(arr2);
        List<List<Integer>> ans=new ArrayList<>();
        ans.add(arr1);
        ans.add(arr2);
        return ans;
    }
}
