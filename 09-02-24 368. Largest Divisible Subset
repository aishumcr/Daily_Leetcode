Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]


class Solution {
    
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        int[] lisLength=new int[nums.length];
        Arrays.fill(lisLength,1);
        int[] prev=new int[nums.length];
        Arrays.fill(prev,-1);
        int index=-1,maxlen=0;
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0 && 1+lisLength[j]>lisLength[i]){
                    lisLength[i]=1+lisLength[j];
                    prev[i]=j;
                }
            }
            if(lisLength[i]>maxlen){
                maxlen=lisLength[i];
                index=i;
            }
        }
        List<Integer>ans=new ArrayList<>();
        while(index!=-1){
            ans.add(nums[index]);
            index=prev[index];
        }
        return ans;
    }
}

code by aryan mittal
