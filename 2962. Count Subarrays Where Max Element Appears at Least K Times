You are given an integer array nums and a positive integer k.

Return the number of subarrays where the maximum element of nums appears at least k times in that subarray.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,2,3,3], k = 2
Output: 6
Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].
Example 2:

Input: nums = [1,4,2,1], k = 3
Output: 0
Explanation: No subarray contains the element 4 at least 3 times.


Find max element.
l,r starting and ending point of current window.
Iterate through the array with the r pointer, decrementing k whenever the element at r equals the maximum element.
When k becomes zero, it indicates that the frequency of the maximum element in the current window has reached to k.
Increment the l pointer until the frequency of the maximum element in the window becomes k-1.
During this process, count the number of subarrays that can be formed using the current window. This count is equal to the number of elements to the left of the window with the maximum element included.
Add this count to the answer.
Continue this process until the r pointer reaches the end of the array.
Complexity
Time complexity:O(n)
Space complexity:
O(1)
O(n)

class Solution {
    public long countSubarrays(int[] nums, int k) {
        long c=0;
        int high=0,l=0,r=0;
        for(int i:nums){
            if(i>high) high=i;
        }
        while(r<nums.length){
            k-=nums[r]==high?1:0;
            r++;
            while(k==0){
                k+=nums[l]==high?1:0;
                l++;
            }
            c+=l;
        }
        return c;
    }
}

