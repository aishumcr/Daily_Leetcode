You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string "010" is alternating, while the string "0100" is not.

Return the minimum number of operations needed to make s alternating.

 

Example 1:

Input: s = "0100"
Output: 1
Explanation: If you change the last character to '1', s will be "0101", which is alternating.
Example 2:

Input: s = "10"
Output: 0
Explanation: s is already alternating.
Example 3:

Input: s = "1111"
Output: 2
Explanation: You need two operations to reach "0101" or "1010".
 

Constraints:

1 <= s.length <= 104
s[i] is either '0' or '1'.


INTUTION::

When alternating starting from 0, 
the digit '0' should appear at all even positions (0, 2, 4, 6, etc.), 
while the digit '1' should appear at all odd positions (1, 3, 5, 7, etc.).

If the minimum is obtained by counting in an alternating sequence starting from '1',
that case is handled with 'n - count'.

SOLUTION::

public class Solution {
    public int minOperations(String s) {
        int n = s.length(), count = 0;
        if (n == 1) return 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0 && s.charAt(i) == '1') count++;
            if (i % 2 == 1 && s.charAt(i) == '0') count++;
        }
        return Math.min(count, n - count); // "n - count" is to handle the case of alternating 1,0,1,0,...
    }
}
