Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.



import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class Solution {
    public int fun(int ind, List<Integer> ps, int n, int[][] dp) {
        if (ind == ps.size()) {
            if (n == 0) return 0;
            return (int)1e9;
           
        }
        if (dp[ind][n] != -1) return dp[ind][n];
        int take = (int)1e9;
        
        if (n - ps.get(ind) >= 0) {
            take = 1 + fun(ind, ps, n - ps.get(ind), dp);
        }
        int notTake = fun(ind + 1, ps, n, dp);
        return dp[ind][n] = Math.min(take, notTake);
    }

    public int numSquares(int n) {
        List<Integer> ps = new ArrayList<>();
        for (int i = 1; i * i <= n; i++) {
            ps.add(i * i);
        }
        int[][] dp = new int[ps.size()][n + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return fun(0, ps, n, dp);
    }
}

class Solution {
    public int numSquares(int n) {
        return solve(n);
    }

    public int solve(int n) {
        if(n == 0) return 0;
        if(n < 0) return Integer.MAX_VALUE;
        int ans = Integer.MAX_VALUE;
        for(int i=1;i*i<=n;i++) {
            ans = Math.min(
                ans,
                1 + solve(n-(i*i))
            );
        }
        return ans;
    }
}
