You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.

Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

As a reminder, any shorter prefix of a string is lexicographically smaller.

For example, "ab" is lexicographically smaller than "aba".
A leaf of a node is a node that has no children.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static String recur(TreeNode root,String ans){
       if(root==null) return "";
       ans=(char)(root.val+97)+ans;
       if(root.left==null && root.right==null) return ans;
       String l=recur(root.left,ans);
       String r=recur(root.right,ans);
       if(l.isEmpty()) return r;
       if(r.isEmpty()) return l;
        return l.compareTo(r)<=0?l:r;

    }
    public String smallestFromLeaf(TreeNode root) {
        String ans="";
        return recur(root,ans);
        
    }
}
